# Find host header value
        host = fetch_header(HOST, artifact.headers)

        # Initialize parameters (to be filled from query)
        parameters = dict()

        # Split location to path and query string
        if "?" in location:
            path, query = location.split("?", 1)

            # Split query by amp and parse parameters
            for parameter in query.split("&"):
                # Check if parameter contains "="
                if "=" not in parameter:
                    continue

                # Split parameter
                name, value = parameter.split("=", 1)

                # Parse as encoded parameters
                name = urllib.unquote(name.strip())
                value = urllib.unquote(value.strip())

                # Add to dictionary
                parameters[name] = value

            # Return created request
            return Request(
                host, method, path, parameters, artifact.headers, artifact.content
            )


# Create location string
        location = request.location

        # Check if request parameters have to be added
        if request.parameters:
            location += "?" + "&".join(
                [
                    "%s=%s" % (urllib.quote(name), urllib.quote(value))
                    for name, value in request.parameters.items()
                ]
            )

        # Create HTTP header
        header = "%s %s HTTP/%.1f" % (request.method, location, VERSION)

        # Create header list
        headers = request.headers

        # Insert host header if needed
        if request.host:
            headers.insert(0, Header("Host", request.host))
